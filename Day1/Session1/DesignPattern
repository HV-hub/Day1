DP01 Explain the importance of Object oriented design
-----------------------------------------------------------
- The main aim of Object Oriented Design (OOD) is to improve the 
quality and 
productivity of system analysis and design by making it more usable.

The OO model is beneficial in the following ways âˆ’
----------------------------------------------------------
- It facilitates changes in the system at low cost.
- It promotes the reuse of components.
- It simplifies the problem of integrating components to configure large system.
- It simplifies the design of distributed systems.

Elements of Object-Oriented System
----------------------------------------
- Objects
- Attributes
- Behavior
- class
- Methods
- Message
Features of Object-Oriented System
---------------------------------------
- Encapsulation
- Abstraction
- Relationship
    - Aggregation
    - Association
    - Generalization
- Inheritance
- Polymorphism

Advantages - Loose coupling, ease of maintenance, scalability
----------------------------------------------------------------
/*
 * Tight Coupling Example in java using concrete classes
 */

class Manager {

	SmartWorker sw;
	LazyWorker lw;

	public Manager(SmartWorker sw, LazyWorker lw) {

		this.sw = sw;
		this.lw = lw;
	}

	public void ManageWork() {
		sw.work();
		lw.work();
	}

}

class SmartWorker {
	public void work() {
		System.out.println("smart worker working");
	}

}

class LazyWorker {
	public void work() {
		System.out.println("Lazy worker working");
	}

}


public class Test {

	public static void main(String[] args) {

		SmartWorker sw = new SmartWorker();
		LazyWorker lw = new LazyWorker();
		Manager mn = new Manager(sw, lw);
		mn.ManageWork();

	}

}


-------------------
DP02 -DP05
------------------
--------SOLID Principles----------------

1. Single Responsibility
2. Open/Closed
3. Liskov Substitution
4. Interface Segregation
5. Dependency Inversion

---------------------------------

1. Single Responsibility
--------------
-  A class should have one and only one reson to change

2. Open/Closed
- Software entity should be open for extension but closed for modification

3. Liskov Substitution
- Subtype must be substitutable for their base type.

4. Interface Segregation
- The dependency of one class to another one should be depend on the smallest possible interface.
	- Clients should not be forced to implement interfaces they do not use.
	- Instead of fat interface many small interfaces are preferred based on groups of methods, 
	  each one serving one sub module.
	 
5. Dependency Inversion
- Depends upon abstractions(Interfaces) not upon concrete class.

DP-006
-----------
https://www.tutorialspoint.com/design_pattern/design_pattern_overview.htm#:~:text=Types%20of%20Design%20Patterns%20%20%20%20S.N.,Patterns%20These%20design%20patterns%20are%20%20...

1. Creational design patterns

Creational design patterns are concerned with the way of creating objects. 

=>Types of creational design patterns
- Factory Method Pattern*
- Abstract Factory Pattern*
- Singleton Pattern*
- Prototype Pattern
- Builder Pattern
- Object Pool Pattern
 